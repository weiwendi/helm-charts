// 声明 CD 管道.
pipeline {

    // environment 用于设置变量,变量作用域是该管道;
    environment {

        // 设置图表存储库的地址
        gitPackageRepoPage = 'https://charts.aiops.red'

        // 定义 kubeconfig 凭证变量，kubeconfig 是我们在 Jenkins 控制台创建的凭证 ID;
        // helm/kubectl 与 Kubernetes 交互时，需要 kubeconfig 验证. 
        KUBECONFIG = credentials('kubeconfig')
    }


    // 定义执行 Job 的 jenkins agent;
    // agent 是运行在 Kubernetes 集群中的一个 Pod. 
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  hostAliases:
  - hostnames:
    - inner-k8s.9f.cn
    ip: 192.168.64.1
  containers:
    # 定义容器的名称
  - name: test-and-release-cd
    # 指定容器的镜像,该镜像包含了 helm/ct/yamllint/yamale/git/kubectl
    image: registry.cn-beijing.aliyuncs.com/sretech/cttools:latest
    command:
    - sleep
    args:
    - infinity
    resources:
      requests:
        memory: "1024Mi"
        cpu: "1000m"
      limits:
        memory: "1024Mi"
        cpu: "1000m"
  # 选择标签是 roles=cicd 的节点运行该 Pod.
  nodeSelector:
    roles: cicd
'''
            // 设置执行各 stages 时默认使用 test-and-release-cd 容器
            defaultContainer 'test-and-release-cd'
        }
    }
	
    // Jenkins 选项
    options {

        // 显示执行的时间，需要 Timestamper 插件支持.
        timestamps()

        // 保留最近 10 次构建记录
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    // 设置 pipeline 执行的各个阶段,建议至少包含一个 stage.
    stages {

        // stage 定义了 pipeline 完成的所有实际工作.
        stage('Build Messages') {

            // steps 定义了 pipeline 具体执行的步骤.
            steps {
                
                // 指定使用哪个容器执行该 steps,默认是 test-and-release-cd,这里用来演示 container 的用法.
                container("test-and-release-cd") {
                    echo " workspace: ${WORKSPACE}\n gitPackageRepoPage: ${gitPackageRepoPage}\n} branch: ${env.BRANCH_NAME}\n buildId: ${BUILD_ID}"
                }
            }
        }	

        stage("Copy Kubeconfig") {
            steps {
                script {
                    sh """
                        mkdir -p ~/.kube
                        cp ${KUBECONFIG} ~/.kube/config
                    """
                }
            }
        }

        stage("Add Chart") {
            steps {
                sh "helm repo add aiops ${env.gitPackageRepoPage}/stable"
            }
        }

        stage("Deploy to Dev") {
            steps {
                script {
                    dir("nginx-cd") {
                        sh """
                            helm upgrade --install nginx-${env.BRANCH_NAME} aiops/nginx --values common-values.yaml --values dev/values.yaml -n dev --wait
                            kubectl -n dev exec deploy/nginx-${env.BRANCH_NAME} -- env | grep ENVIRONMENT
                        """
                    }
                }
            }
        }

        stage("Smoke Test DEV") {
            steps {
                sh "helm test nginx-${env.BRANCH_NAME} -n dev"
            }
        }

        stage("Deploy to QA") {
            when {
                expression {
                    return env.BRANCH_NAME == "main"
                }
            }
            steps {
                dir("nginx-cd") {
                    sh """
                        helm upgrade --install nginx-${env.BRANCH_NAME} aiops/nginx --values common-values.yaml --values qa/values.yaml -n qa --wait
                        kubectl -n qa exec deploy/nginx-${env.BRANCH_NAME} -- env | grep ENVIRONMENT
                    """
                }
            }
        }

        stage("Smoke Test QA") {
            steps {
                sh "helm test nginx-${env.BRANCH_NAME} -n qa"
            }
        }

        stage("Wait for Input") {
            when {
                expression {
                    return env.BRANCH_NAME == "main"
                }
            }
            steps {
                input "Deploy to Prod?"
            }
        }

        stage("Deploy to Prod") {
            when {
                expression {
                    return env.BRANCH_NAME == "main"
                }
            }
            steps {
                dir("nginx-cd") {
                    sh """
                        helm upgrade --install nginx-${env.BRANCH_NAME} aiops/nginx --values common-values.yaml --values prod/values.yaml -n prod --wait
                        kubectl -n prod exec deploy/nginx-${env.BRANCH_NAME} -- env | grep ENVIRONMENT
                    """
                }
            }
        }

        stage("Smoke Test PROD") {
            steps {
                sh "helm test nginx-${env.BRANCH_NAME} -n prod"
            }
        }

    }
}
